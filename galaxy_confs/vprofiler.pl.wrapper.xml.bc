<tool id="vprofiler" name="V-Profiler">

    <description>variant detection, building on V-Phaser output</description>

    <command>
        vprofiler.pl.wrapper.py
        <!-- -i		$input_file -->
	-iqlx		$input_qlx
	-icalls		$input_calls
	-iconsen	$input_consen
	-igenes		$input_genes
	-iregion	$input_region 
	Vpro_T0_ntfreq.txt
	Vpro_T0_codonfreq.xls
	Vpro_T0_codon_details.txt
	Vpro_T0_Heatmap_All.zip
	Vpro_haplotypes.zip

    </command>
    <inputs>
    <repeat name="sample_series" title="Sample Series">
    	<param name="input_qlx"		type="data" format="qlx" label="QLX input file (RC454 output)"/>
	<param name="input_calls"	type="data" format="txt" label="Variant Calls (V-Phaser output)"/>
        <param name="input_consen"      type="data" format="txt" label="Consensus Sequence "/>
        <param name="input_genes"      	type="data" format="txt" label="Gene List "/>
        <param name="input_region"      type="data" format="txt" label="Haplo Region List "/>

   </repeat>
   </inputs>
   <!-- <configfiles>
   <configfile name="input_file">
   ## create the input config file required for vprofiler to run (dont change the FORMATTING (tabs etc) of the following part, it breaks)
#encoding UTF-8
# -*- coding: UTF-8 -*-
>Qlx
#for $i, $x in enumerate($sample_series) 
${x.input_qlx}	T$i
#end for

>VPhaser
#for $i, $x in enumerate($sample_series)
${x.input_calls}	T$i
#end for

>Consensus
#for $i, $x in enumerate($sample_series)
${x.input_consen}	T$i
#end for

>Genelist
#for $i, $x in enumerate($sample_series)
#set $z = $x.input_genes
#set $z = str($z).decode('utf-8')
u'$z'	T$i
#end for

>Region
#for $i, $x in enumerate($sample_series)
#set $z = $x.input_region
#set $z = str($z).decode('utf-8')
u'$z'	T$i
#end for

  </configfile>
  </configfiles> -->
   <outputs>
       <data format="txt" name= "out_ntfreq" 	label="${tool.name} on ${on_string}: Nucleotide Frequencies" 
		 from_work_dir="Vpro_T0_ntfreq.txt"    />
       <data format="xls" name= "out_cod_freq" 	label="${tool.name} on ${on_string}: Codon Frequencies" 
		from_work_dir="Vpro_T0_codonfreq.xls"    />
       <data format="txt" name= "out_cod_det" 	label="${tool.name} on ${on_string}: Codon Details"   
		from_work_dir="Vpro_T0_codon_details.txt"    />
       <data format="zip" name= "out_heat" 	label="${tool.name} on ${on_string}: Heatmaps"   
		from_work_dir="Vpro_T0_Heatmap_All.zip"    />
       <data format="zip" name= "out_haplo" 	label="${tool.name} on ${on_string}: Haplotypes"   
		from_work_dir="Vpro_haplotypes.zip"    /> 

   </outputs>

<help>

**V-PROFILER Overview**

V-Profiler_ takes a read alignment and a list of accepted variants at each location in the alignment (such as would be generated by V-Phaser) and analyzes the intra-host diversity of a genome. This can be done at the nucleotide level over the whole sequence, at the codon level for each gene specified in a list, and at the haplotype level for any region delimited (note that the region must not exceed a read length, and is preferably of shorter length such as an epitope or a loop of interest). It will also output Heatmaps of the diversity at the codon level using R.

.. _V-Profiler: http://www.broadinstitute.org/scientific-community/science/projects/viral-genomics/v-profiler

------

**Inputs**

For each sample, the following inputs are required:

 - QLX Alignment file (RC454 output) [Format(s): QLX]
 - Variant Calls file (V-Phaser output) [Format(s): TEXT]
 - Consensus sequence file (typically Mosaik output, but can be from another source) [Format(s): FASTA]
 - Gene List. A user-defined list of genes contained in the consensus and their positions in the consensus alignment. See example below. [Format(s): TEXT]
 - Haplotype Region List: A user-defined list of known haplotype regions on the consensus alignment. See example below [Format(s): TEXT]

.. class: infomarker

Note that multiple samples can be analysed as a time series. This can be done by adding each additional sample as an additional *sample series*. Under a time series, Heatmaps will all be done by comparing the % of agreement with the dominant residue to the first time point in the series, and the haplotype output files will include every time point in the same file comparing them to one another. If you want samples to be treated independently, they should each be run on their own.

.. class: infomarker
<!--
Gene List Example Input: Your gene list should be a text file containing **TEB-SEPARATED** entries of *Gene_name* TAB *Start_position* TAB *End_Position*, as below:

Gag	1	1521
Pol	1305	4325
Vif	4270	4848
Vpr	4788	5075
Tat1	5059	5274
Tat2	7650	7739
Rev1	5198	5272
Rev2	7648	7923
Vpu	5290	5535
Env	5453	8065

Haplotype Region List Example Input: Your haplotype list file should be a text file containing **TEB-SEPARATED** entries of *haplo_name* TAB *Start_position* TAB *End_Position*, as below:

A25_ELRQHLLRW	2388	2414
B15_RMRRAEPAA	8115	8141
B15_FQTKGLGISY	5170	5199
-->

------

**Outputs**

 - NTFREQ file. Contains nucelotide frequencies ([Format(s): TEXT]
 - CODONFREQ file. Contains codon frequencies ([Format(s): TEXT]
 - CODON_DETAILS file. Codon call information ([Format(s): TEXT]
 - HEATMAP_ALL folder. Zipped folder that contains all the relevant heatmaps for the samples ([Format(s): ZIP]
 - HAPLOTYPES folder. Haplotype analysis output [Format(s): ZIP]

a) xyz_xyz_ntfreq.txt 

This is the main nucleotide frequency table. For each position it gives you what the coverage was in your genome and the frequency of each accepted variant (as a fraction of 1, 1 being 100%). Note that the frequencies count ONLY the variants that are called by v-phaser and drops the rest (both from coverage and from frequency calls), considering them to be sequencing error.  For Deletions, you have 2 columns. The first one gives you the frequency of deletion starting at the position, the second the frequency of deletions that are extended at this position (this can allow you to distinguish between long deletions or multiple small deletions, and if you want to count deletions as a single event for an analysis no matter its length you can ignore the second column). Insertions also have 2 columns, one for the frequency of insertions and the other for the observed insertions. Note that the frequency of insertion represents the % of reads that have an insertion after the position where it is noted.

b) xyz_xyz_codonfreq.xls

This is the main codon frequency table for a sample. It will contain the data for each gene one after the other. The first column in the file is the nucleotide position in the full genome. The second column is the amino-acid position within the gene. The third column is the coverage at this position of accepted calls (in parenthesis, only coverage of high quality calls). The 4th column is the consensus codon (the one found in the consensus sequence supplied as an input, which could different from the highest frequency call). You then have a serie of columns for each call made, in the format “[AA] ([freqCodon]%)([codon])”. Note that the % is the % of the codon, not of the amino-acid.

c) xyz_xyz_codon_details.txt

This file contains more details about each codon call, particularly about which codons were observed but rejected. This can be interesting if you have doubts about why a particular codon was not called, or to see for example in time-series data if a particular codon was seen in previous time points but was simply not frequent enough to be accepted then.

d) xyz_xyz_Heatmap_All folder

This folder contains all the Heatmaps for codon frequency. If you do not use the –allheat option, it will contain 3 Heatmaps, one for all variant, one for only synonymous changes, and one for only non-synonymous changes. If you use the –allheat option, it has one .pdf for each gene and one for the full genome (all genes back to back in the order of the genelist). It also contains the .r files that R used to generate the Heatmap. In the main folder you will find the Heatmaps for all codon mutation. You will find 2 folders, *_Syn and *_NonSyn, that contain the Heatmaps for only synonymous calls and only non-synonymous calls respectively.

e) xyz_haplotypes folder 
This folder contains the outputs for the Haplotype analysis. It is tab-delimited and so could be more readable in a program like Excel or something similar. The files in the folder are named xyz_xyz_output.txt. For time series, the sample name is the name of the first sample in the series. The file contains the haplotype in codon and amino-acid sequence, and the frequency of each haplotype in % for each sample, with the number of times it was counted. If you use the –haploseq option, you will also have all the files containing the aligned nucleotide and amino-acid sequence of each haplotype region.

-------

**Defaults**

.. class:: warningmarker

TODO


</help>
</tool>
